{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Container, Grid, Header, Input, Divider, Segment } from 'semantic-ui-react';\nimport { setAge, setWeight } from '../../redux/actions/calculatorActions';\n\nfunction calculate_age(dob) {\n  var diff = Date.now() - dob.getTime();\n  var age_diff = new Date(diff);\n  return Math.abs(age_diff.getUTCFullYear() - 1970);\n}\n\nvar Calculator = /*#__PURE__*/function (_React$Component) {\n  _inherits(Calculator, _React$Component);\n\n  var _super = _createSuper(Calculator);\n\n  _createClass(Calculator, null, [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(_ref) {\n      var store = _ref.store;\n    }\n  }]);\n\n  function Calculator(props) {\n    var _this;\n\n    _classCallCheck(this, Calculator);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleValueChange\", function (element, field) {\n      _this.setState(_defineProperty({}, field, element.value)); // eslint-disable-next-line react/destructuring-assignment\n\n    });\n\n    var sessionId = props.sessionId,\n        patientSex = props.patientSex,\n        patientHeightFormatted = props.patientHeightFormatted,\n        patientWeightFormatted = props.patientWeightFormatted,\n        patientBirthDate = props.patientBirthDate;\n    var dateYearMonthDayArray = patientBirthDate.split('-', 3);\n    var formattedBirthDate = new Date(dateYearMonthDayArray);\n    _this.state = {\n      currentAge: calculate_age(formattedBirthDate),\n      currentWeight: patientWeightFormatted,\n      currentHeight: patientHeightFormatted,\n      currentSex: patientSex,\n      currentCreatine: '',\n      sessionId: sessionId,\n      inputsFilled: false\n    };\n    return _this;\n  }\n\n  _createClass(Calculator, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.state.currentSex !== \"\" && this.state.currentWeight !== \"\" && this.state.currentHeight !== \"\" && this.state.currentAge !== \"\" && this.state.currentCreatine !== \"\") {\n        console.log('inputs filled');\n      } else {\n        console.log('inputs not filled');\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          currentAge = _this$state.currentAge,\n          currentSex = _this$state.currentSex,\n          currentHeight = _this$state.currentHeight,\n          currentCreatine = _this$state.currentCreatine,\n          currentWeight = _this$state.currentWeight,\n          sessionId = _this$state.sessionId,\n          inputsFilled = _this$state.inputsFilled;\n      return __jsx(Container, {\n        size: \"large\",\n        textAlign: \"center\"\n      }, __jsx(Header, {\n        as: \"h2\"\n      }, \"MD Calc Demo\"), __jsx(\"br\", null), __jsx(Segment, null, __jsx(Grid, {\n        columns: 2\n      }, __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Header, {\n        as: \"h4\"\n      }, \"Sex\")), __jsx(Grid.Column, null, __jsx(Button.Group, null, __jsx(Button, {\n        value: \"female\",\n        active: currentSex === 'female',\n        onClick: function onClick(event, element) {\n          return _this2.handleValueChange(element, 'currentSex');\n        }\n      }, \"Female\"), __jsx(Button, {\n        value: \"male\",\n        active: currentSex === 'male',\n        onClick: function onClick(event, element) {\n          return _this2.handleValueChange(element, 'currentSex');\n        }\n      }, \"Male\")))), __jsx(Divider, {\n        section: true\n      }), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Header, {\n        as: \"h4\"\n      }, \"Age\")), __jsx(Grid.Column, null, __jsx(Input, {\n        label: {\n          basic: true,\n          content: 'years'\n        },\n        labelPosition: \"right\",\n        placeholder: \"Enter age...\",\n        value: currentAge,\n        onChange: function onChange(event, element) {\n          return _this2.handleValueChange(element, 'currentAge');\n        }\n      }))), __jsx(Divider, {\n        section: true\n      }), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Header, {\n        as: \"h4\"\n      }, \"Weight\")), __jsx(Grid.Column, null, __jsx(Input, {\n        label: {\n          basic: true,\n          content: 'kg'\n        },\n        labelPosition: \"right\",\n        placeholder: \"Enter weight...\",\n        value: currentWeight,\n        onChange: function onChange(event, element) {\n          return _this2.handleValueChange(element, 'currentWeight');\n        }\n      }))), __jsx(Divider, {\n        section: true\n      }), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Header, {\n        as: \"h4\"\n      }, \"Creatinine\")), __jsx(Grid.Column, null, __jsx(Input, {\n        label: {\n          basic: true,\n          content: 'mg/dl'\n        },\n        labelPosition: \"right\",\n        placeholder: \"Enter creatinine...\",\n        value: currentCreatine,\n        onChange: function onChange(event, element) {\n          return _this2.handleValueChange(element, 'currentCreatine');\n        }\n      }))), __jsx(Divider, {\n        section: true\n      }), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Header, {\n        as: \"h4\"\n      }, \"Height\")), __jsx(Grid.Column, null, __jsx(Input, {\n        label: {\n          basic: true,\n          content: 'cm'\n        },\n        labelPosition: \"right\",\n        placeholder: \"Enter height...\",\n        value: currentHeight,\n        onChange: function onChange(event, element) {\n          return _this2.handleValueChange(element, 'currentHeight');\n        }\n      })))), __jsx(Button, {\n        disabled: !inputsFilled\n      }, \"Inputs filled\")));\n    }\n  }]);\n\n  return Calculator;\n}(React.Component);\n\nvar formatInitialProps = function formatInitialProps(props) {\n  return _objectSpread({}, props);\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    stats: state.stats.value\n  };\n};\n\nvar mapDispatchToProps = {\n  setAge: setAge,\n  setWeight: setWeight\n};\n\nCalculator.getInitialProps = function _callee(_ref2) {\n  var req, query, patientBirthDate, patientSex, patientHeightFormatted, patientWeightFormatted, sessionId;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          req = _ref2.req, query = _ref2.query;\n          patientBirthDate = query.patientBirthDate, patientSex = query.patientSex, patientHeightFormatted = query.patientHeightFormatted, patientWeightFormatted = query.patientWeightFormatted, sessionId = query.sessionId;\n          return _context.abrupt(\"return\", formatInitialProps({\n            patientBirthDate: patientBirthDate,\n            patientSex: patientSex,\n            patientHeightFormatted: patientHeightFormatted,\n            patientWeightFormatted: patientWeightFormatted,\n            sessionId: sessionId\n          }));\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Calculator);","map":null,"metadata":{},"sourceType":"module"}