{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport fetch from 'isomorphic-unfetch';\n\nconst fetchData = async (_ref) => {\n  let {\n    url,\n    method = 'POST',\n    responseType = 'json',\n    body,\n    headers = {}\n  } = _ref,\n      params = _objectWithoutProperties(_ref, [\"url\", \"method\", \"responseType\", \"body\", \"headers\"]);\n\n  let defaultHeaders = {\n    Accept: 'application/json',\n    'Content-Type': 'application/json'\n  };\n\n  if (Object.keys(headers).length) {\n    defaultHeaders = _objectSpread({}, defaultHeaders, {}, headers);\n  }\n\n  const options = _objectSpread({\n    method,\n    headers: _objectSpread({}, defaultHeaders)\n  }, params);\n\n  if (body) {\n    options.body = JSON.stringify(body);\n  }\n\n  try {\n    const res = await fetch(url, options);\n    return res[responseType]();\n  } catch (err) {\n    throw err;\n  }\n};\n\nexport default fetchData;","map":null,"metadata":{},"sourceType":"module"}