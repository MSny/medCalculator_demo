{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport fetch from 'isomorphic-unfetch';\n\nvar fetchData = function fetchData(_ref) {\n  var url, _ref$method, method, _ref$responseType, responseType, body, _ref$headers, headers, params, defaultHeaders, options, res;\n\n  return _regeneratorRuntime.async(function fetchData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          url = _ref.url, _ref$method = _ref.method, method = _ref$method === void 0 ? 'POST' : _ref$method, _ref$responseType = _ref.responseType, responseType = _ref$responseType === void 0 ? 'json' : _ref$responseType, body = _ref.body, _ref$headers = _ref.headers, headers = _ref$headers === void 0 ? {} : _ref$headers, params = _objectWithoutProperties(_ref, [\"url\", \"method\", \"responseType\", \"body\", \"headers\"]);\n          defaultHeaders = {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n          };\n\n          if (Object.keys(headers).length) {\n            defaultHeaders = _objectSpread({}, defaultHeaders, {}, headers);\n          }\n\n          options = _objectSpread({\n            method: method,\n            headers: _objectSpread({}, defaultHeaders)\n          }, params);\n\n          if (body) {\n            options.body = JSON.stringify(body);\n          }\n\n          _context.prev = 5;\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(fetch(url, options));\n\n        case 8:\n          res = _context.sent;\n          return _context.abrupt(\"return\", res[responseType]());\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](5);\n          throw _context.t0;\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[5, 12]], Promise);\n};\n\nexport default fetchData;","map":null,"metadata":{},"sourceType":"module"}