{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Container, Grid, Header, Input, Divider, Segment } from 'semantic-ui-react';\nimport { setAge, setWeight } from '../../redux/actions/calculatorActions';\n\nfunction calculate_age(dob) {\n  const diff = Date.now() - dob.getTime();\n  const age_diff = new Date(diff);\n  return Math.abs(age_diff.getUTCFullYear() - 1970);\n}\n\nclass Calculator extends React.Component {\n  static getInitialProps({\n    store\n  }) {}\n\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleValueChange\", (element, field) => {\n      // eslint-disable-next-line react/destructuring-assignment\n      if (this.state.currentSex !== \"\" && this.state.currentWeight !== \"\" && this.state.currentHeight !== \"\" && this.state.currentAge !== \"\" && this.state.currentCreatine !== \"\") {\n        console.log('inputs filled');\n        this.setState({\n          inputsFilled: true,\n          [field]: element.value\n        });\n      } else {\n        console.log('inputs not filled');\n        this.setState({\n          [field]: element.value,\n          inputsFilled: false\n        });\n      }\n    });\n\n    const {\n      sessionId,\n      patientSex,\n      patientHeightFormatted,\n      patientWeightFormatted,\n      patientBirthDate\n    } = props;\n    const dateYearMonthDayArray = patientBirthDate.split('-', 3);\n    const formattedBirthDate = new Date(dateYearMonthDayArray);\n    this.state = {\n      currentAge: calculate_age(formattedBirthDate),\n      currentWeight: patientWeightFormatted,\n      currentHeight: patientHeightFormatted,\n      currentSex: patientSex,\n      currentCreatine: '',\n      sessionId,\n      inputsFilled: false\n    };\n  }\n\n  render() {\n    const {\n      currentAge,\n      currentSex,\n      currentHeight,\n      currentCreatine,\n      currentWeight,\n      sessionId,\n      inputsFilled\n    } = this.state;\n    return __jsx(Container, {\n      size: \"large\",\n      textAlign: \"center\"\n    }, __jsx(Header, {\n      as: \"h2\"\n    }, \"MD Calc Demo\"), __jsx(\"br\", null), __jsx(Segment, null, __jsx(Grid, {\n      columns: 2\n    }, __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Header, {\n      as: \"h4\"\n    }, \"Sex\")), __jsx(Grid.Column, null, __jsx(Button.Group, null, __jsx(Button, {\n      value: \"female\",\n      active: currentSex === 'female',\n      onClick: (event, element) => this.handleValueChange(element, 'currentSex')\n    }, \"Female\"), __jsx(Button, {\n      value: \"male\",\n      active: currentSex === 'male',\n      onClick: (event, element) => this.handleValueChange(element, 'currentSex')\n    }, \"Male\")))), __jsx(Divider, {\n      section: true\n    }), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Header, {\n      as: \"h4\"\n    }, \"Age\")), __jsx(Grid.Column, null, __jsx(Input, {\n      label: {\n        basic: true,\n        content: 'years'\n      },\n      labelPosition: \"right\",\n      placeholder: \"Enter age...\",\n      value: currentAge,\n      onChange: (event, element) => this.handleValueChange(element, 'currentAge')\n    }))), __jsx(Divider, {\n      section: true\n    }), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Header, {\n      as: \"h4\"\n    }, \"Weight\")), __jsx(Grid.Column, null, __jsx(Input, {\n      label: {\n        basic: true,\n        content: 'kg'\n      },\n      labelPosition: \"right\",\n      placeholder: \"Enter weight...\",\n      value: currentWeight,\n      onChange: (event, element) => this.handleValueChange(element, 'currentWeight')\n    }))), __jsx(Divider, {\n      section: true\n    }), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Header, {\n      as: \"h4\"\n    }, \"Creatinine\")), __jsx(Grid.Column, null, __jsx(Input, {\n      label: {\n        basic: true,\n        content: 'mg/dl'\n      },\n      labelPosition: \"right\",\n      placeholder: \"Enter creatinine...\",\n      value: currentCreatine,\n      onChange: (event, element) => this.handleValueChange(element, 'currentCreatine')\n    }))), __jsx(Divider, {\n      section: true\n    }), __jsx(Grid.Row, null, __jsx(Grid.Column, null, __jsx(Header, {\n      as: \"h4\"\n    }, \"Height\")), __jsx(Grid.Column, null, __jsx(Input, {\n      label: {\n        basic: true,\n        content: 'cm'\n      },\n      labelPosition: \"right\",\n      placeholder: \"Enter height...\",\n      value: currentHeight,\n      onChange: (event, element) => this.handleValueChange(element, 'currentHeight')\n    })))), __jsx(Button, {\n      disabled: !inputsFilled\n    }, \"Inputs filled\")));\n  }\n\n}\n\nconst formatInitialProps = props => _objectSpread({}, props);\n\nconst mapStateToProps = state => ({\n  stats: state.stats.value\n});\n\nconst mapDispatchToProps = {\n  setAge,\n  setWeight\n};\n\nCalculator.getInitialProps = async ({\n  req,\n  query\n}) => {\n  const {\n    patientBirthDate,\n    patientSex,\n    patientHeightFormatted,\n    patientWeightFormatted,\n    sessionId\n  } = query;\n  return formatInitialProps({\n    patientBirthDate,\n    patientSex,\n    patientHeightFormatted,\n    patientWeightFormatted,\n    sessionId\n  });\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Calculator);","map":null,"metadata":{},"sourceType":"module"}